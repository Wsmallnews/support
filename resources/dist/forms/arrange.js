function g({state:u,arrangeToRecursionKey:c,tableFields:l}){return{state:u,arrangeToRecursionKey:c,tableFields:l,arrangeTempIdCount:1,recursionTempIdCount:1,arrangeRealIdToTempId:[],arranges:[],recursions:[],init:function(){this.initArranges(),this.initRecursions(),this.arranges||this.autoFirst(),this.buildRecursionsTable(),this.updateState(),this.$watch("arranges",(e,i)=>{this.buildRecursionsTable(),this.updateState()})},initArranges:function(){(this.state.arranges??[]).forEach((i,a)=>{let r=i;r.temp_id=this.arrangeTempIdCount++;let s=[];i.children.forEach((t,n)=>{t.temp_id=this.arrangeTempIdCount++,this.arrangeRealIdToTempId[t.id]=t.temp_id,s.push(t)}),this.arranges.push(r)})},initRecursions:function(){(this.state.recursions??[]).forEach((i,a)=>{let r=i;r.temp_id=this.recursionTempIdCount++,r.arrange_temp_ids=[];let s=Array.isArray(r[this.arrangeToRecursionKey])?r[this.arrangeToRecursionKey]:r[this.arrangeToRecursionKey].split(",");s.forEach(t=>{this.arrangeRealIdToTempId[t]&&r.arrange_temp_ids.push(this.arrangeRealIdToTempId[t])}),s.length==r.arrange_temp_ids.length&&this.recursions.push(r)})},updateState:function(){let e={};e.arranges=this.arranges,e.recursions=this.recursions,this.state=e},arrangeTemplate:function(){return{temp_id:this.arrangeTempIdCount++,name:"",order_column:this.arranges.length,children:[]}},childrenArrangeTemplate:function(e){return{temp_id:this.arrangeTempIdCount++,name:"",image:"",order_column:this.arranges[e].children.length}},autoFirst:function(){this.arranges=[this.arrangeTemplate()],this.arranges[0].children.push(this.childrenArrangeTemplate(0))},addArrange:function(){this.arranges.push(this.arrangeTemplate())},addChildrenArrange:function(e){this.arranges[e].children.push(this.childrenArrangeTemplate(e)),this.arranges[e].children.length==1&&(this.recursions=[])},deleteArrange:function(e){this.arranges[e].children.length&&(this.recursions=[]),this.arranges.splice(e,1)},deleteChildrenArrange:function(e,i){let a=this.arranges[e].children[i];if(this.arranges[e].children.splice(i,1),this.arranges[e].children.length<=0)this.recursions=[];else{let r=[];this.recursions.forEach((s,t)=>{s.arrange_texts.forEach((n,h)=>{n==a.name&&r.push(t)})}),r.sort(function(s,t){return t-s}),r.forEach((s,t)=>{this.recursions.splice(s,1)})}},buildRecursionsTable:function(){let e=[];this.arranges.forEach((i,a)=>{let r=i.children,s=[];r.length>0&&(r.forEach((t,n)=>{s.push(t.temp_id)}),e.push(s))}),this.recursionFunc(e)},recursionFunc:function(e,i=0,a=[]){if(i==e.length&&i!=0){let r=[],s=[];a.forEach((n,h)=>{this.arranges.forEach((d,p)=>{d.children.forEach((o,f)=>{n==o.temp_id&&(r.push(o.name),s.push(o.temp_id))})})});let t=!1;for(let n in this.recursions)if(this.recursions[n].arrange_temp_ids.sort(),s.sort(),this.recursions[n].arrange_temp_ids.join(",")==s.join(",")){t=n;break}if(t)this.recursions[t].arrange_texts=r,this.recursions[t].arrange_temp_ids=s;else{let n={temp_id:this.recursionTempIdCount+1,arrange_texts:r,arrange_temp_ids:s};this.tableFields.forEach(h=>{n[h.field]=h.default}),n[this.arrangeToRecursionKey]=[],this.recursions.push(n)}}e.length&&e[i]&&e[i].forEach((r,s)=>{a[i]=e[i][s],this.recursionFunc(e,i+1,a)})}}}export{g as default};
