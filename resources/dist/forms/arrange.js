// resources/js/forms/arrange.js
function arrangeFormField({ state }) {
  return {
    state,
    arrangeTempIdCount: 1,
    arranges: [],
    recursions: [],
    arrangeTemplate: function() {
      return {
        id: 0,
        temp_id: this.arrangeTempIdCount++,
        name: "",
        order_column: this.arranges.length,
        children: []
      };
    },
    childrenArrangeTemplate: function(index) {
      return {
        id: 0,
        temp_id: this.arrangeTempIdCount++,
        name: "",
        image: "",
        order_column: this.arranges[index].children.length
      };
    },
    // 自动初始化 arranges
    autoFirst: function() {
      this.arranges = [this.arrangeTemplate()];
      this.arranges[0].children.push(this.childrenArrangeTemplate(0));
    },
    // 添加主规格
    addArrange: function() {
      this.arranges.push(this.arrangeTemplate());
    },
    // 添加子规格
    addChildrenArrange: function(index) {
      this.arranges[index].children.push(this.childrenArrangeTemplate(index));
      if (this.arranges[index].children.length) {
        this.recursions = [];
      }
    },
    deleteArrange: function(index) {
      if (this.arranges[index].children.length) {
        this.recursions = [];
      }
      this.arranges.splice(index, 1);
    },
    // 删除子规格
    deleteChildrenArrange: function(parentIndex, index) {
      let data = this.arranges[parentIndex].children[index];
      this.arranges[parentIndex].children.splice(index, 1);
      if (this.arranges[parentIndex].children.length <= 0) {
        this.recursions = [];
      } else {
        let deleteArrangePriceIndexArr = [];
        this.recursions.forEach((recursion, index2) => {
          recursion.arrange_texts.forEach((arrange_text, ix) => {
            if (arrange_text == data.name) {
              deleteArrangePriceIndexArr.push(index2);
            }
          });
        });
        deleteArrangePriceIndexArr.sort(function(a, b) {
          return b - a;
        });
        deleteArrangePriceIndexArr.forEach((recursionIndex, index2) => {
          this.recursions.splice(recursionIndex, 1);
        });
      }
    },
    // 重新构建 recursions 表格
    buildRecursionsTable: function() {
      let arrangeChildrenIdArr = [];
      this.arranges.forEach((arrange, key) => {
        let children = arrange.children;
        let childrenIdArr = [];
        if (children.length > 0) {
          children.forEach((child, k) => {
            childrenIdArr.push(child.temp_id);
          });
          arrangeChildrenIdArr.push(childrenIdArr);
        }
      });
      this.recursionFunc(arrangeChildrenIdArr);
    },
    // 递归
    recursionFunc: function(arrangeChildrenIdArr, arrangeK = 0, temp = []) {
      if (arrangeK == arrangeChildrenIdArr.length && arrangeK != 0) {
        let tempDetail = [];
        let tempDetailIds = [];
        temp.forEach((item, index) => {
          this.arranges.forEach((arrange, inx) => {
            arrange.children.forEach((child, ix) => {
              if (item == child.temp_id) {
                tempDetail.push(child.name);
                tempDetailIds.push(child.temp_id);
              }
            });
          });
        });
        let flag = false;
        for (let i in this.recursions) {
          if (this.recursions[i].arrange_text_temp_ids.join(",") == tempDetailIds.join(",")) {
            flag = i;
            break;
          }
        }
        if (!flag) {
          this.recursions.push({
            id: 0,
            temp_id: this.recursions.length + 1,
            arrange_ids: "",
            arrange_texts: tempDetail,
            arrange_text_temp_ids: tempDetailIds
            // stock_unit: '',
            // convert_num: '',
          });
        } else {
          this.recursions[flag].arrange_texts = tempDetail;
          this.recursions[flag].arrange_text_temp_ids = tempDetailIds;
        }
      }
      if (arrangeChildrenIdArr.length) {
        arrangeChildrenIdArr[arrangeK] && arrangeChildrenIdArr[arrangeK].forEach((cv, ck) => {
          temp[arrangeK] = arrangeChildrenIdArr[arrangeK][ck];
          this.recursionFunc(arrangeChildrenIdArr, arrangeK + 1, temp);
        });
      }
    },
    init: function() {
      this.$watch("arranges", (arranges, oldArranges) => {
        this.buildRecursionsTable();
      });
      this.autoFirst();
    }
  };
}
export {
  arrangeFormField as default
};
//# sourceMappingURL=data:application/json;base64,
